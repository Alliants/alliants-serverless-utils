{
  "openapi": "3.0.0",
  "components": {
    "schemas": {
      "HelloOneSchema": {
        "type": "object",
        "properties": {
          "hello1": {
            "type": "boolean"
          }
        },
        "required": [
          "hello1"
        ],
        "additionalProperties": false
      },
      "HelloTwoSchema": {
        "type": "object",
        "properties": {
          "hello2": {
            "type": "string"
          }
        },
        "required": [
          "hello2"
        ],
        "additionalProperties": false
      },
      "Hello3Request": {
        "type": "object",
        "properties": {
          "hello3": {
            "type": "string"
          }
        },
        "required": [
          "hello3"
        ],
        "additionalProperties": false
      },
      "HelloThreeSchema": {
        "type": "object",
        "properties": {
          "hello3": {
            "type": "string"
          }
        },
        "required": [
          "hello3"
        ],
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "PA003",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "example": "Body is invalid JSON string",
            "title": "Error Message"
          },
          "statusCode": {
            "type": "integer",
            "example": 400,
            "title": "HTTP Code"
          },
          "info": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Error Message"
                    },
                    "field": {
                      "type": "string",
                      "title": "Field"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number",
                            "format": "float"
                          }
                        ]
                      },
                      "title": "Path"
                    },
                    "type": {
                      "type": "string",
                      "title": "Type"
                    },
                    "context": {
                      "type": "object",
                      "properties": {
                        "child": {
                          "type": "string",
                          "title": "Child"
                        },
                        "regex": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": false,
                          "title": "Regex"
                        },
                        "limit": {
                          "type": "number",
                          "format": "float",
                          "title": "Limit"
                        },
                        "key": {
                          "anyOf": [
                            {
                              "type": "string",
                              "title": "Key"
                            },
                            {
                              "type": "number",
                              "format": "float",
                              "title": "Key"
                            }
                          ],
                          "nullable": true,
                          "title": "Key"
                        },
                        "label": {
                          "type": "string",
                          "nullable": true,
                          "title": "Label"
                        },
                        "valids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "title": "Valid Values"
                        },
                        "invalids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "title": "Invalid Values"
                        },
                        "value": {
                          "anyOf": [
                            {
                              "type": "string",
                              "title": "Value"
                            },
                            {
                              "type": "number",
                              "format": "float",
                              "title": "Value"
                            },
                            {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": false,
                              "title": "Value"
                            },
                            {
                              "type": "boolean",
                              "title": "Value"
                            },
                            {
                              "type": "array",
                              "items": {},
                              "title": "Value"
                            }
                          ],
                          "nullable": true,
                          "title": "Value"
                        },
                        "name": {
                          "type": "string",
                          "title": "Name"
                        }
                      },
                      "additionalProperties": false,
                      "title": "Context"
                    },
                    "paramType": {
                      "type": "string",
                      "enum": [
                        "body",
                        "queryParams",
                        "pathParams",
                        "cookieParams",
                        "requestHeaders"
                      ],
                      "title": "Param Type"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "ForbiddenResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AU002",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "example": "Invalid credentials",
            "title": "Error Message"
          },
          "statusCode": {
            "type": "integer",
            "example": 403,
            "title": "HTTP Code"
          }
        },
        "additionalProperties": false
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AU001",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "example": "User not found",
            "title": "Error Message"
          },
          "statusCode": {
            "type": "integer",
            "example": 404,
            "title": "HTTP Code"
          }
        },
        "additionalProperties": false
      },
      "RateLimitedResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "DE004",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "example": "Rate limited",
            "title": "Error Message"
          },
          "statusCode": {
            "type": "integer",
            "example": 429,
            "title": "HTTP Code"
          }
        },
        "additionalProperties": false
      },
      "ServerErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "DE000",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "example": "Unexpected error",
            "title": "Error Message"
          },
          "statusCode": {
            "type": "integer",
            "example": 500,
            "title": "HTTP Code"
          }
        },
        "additionalProperties": false
      },
      "UnauthorizedResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AU002",
            "title": "Error Code"
          },
          "message": {
            "type": "string",
            "example": "Invalid credentials",
            "title": "Error Message"
          },
          "statusCode": {
            "type": "integer",
            "example": 401,
            "title": "HTTP Code"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "title": "Example API",
    "description": "OpenAPI documentation.",
    "version": "1",
    "termsOfService": ""
  },
  "servers": [],
  "paths": {
    "/hello1": {
      "get": {
        "operationId": "hello1",
        "summary": "Hello 1",
        "description": "Hello 1 template.",
        "tags": [
          "Hello One Section"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An object returning hello1: true.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelloOneSchema"
                }
              }
            }
          },
          "400": {
            "description": "An error message when getting hello 1. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "DE001 - Unexpected error (4XX)": {
                    "value": {
                      "code": "DE001",
                      "message": "Unexpected error (4XX)",
                      "statusCode": 400
                    }
                  },
                  "PA001 - Parameter error": {
                    "value": {
                      "code": "PA001",
                      "message": "Parameter error",
                      "statusCode": 400
                    }
                  },
                  "PA002 - Parameter missing": {
                    "value": {
                      "code": "PA002",
                      "message": "Parameter missing",
                      "statusCode": 400
                    }
                  },
                  "PA003 - Body is invalid JSON string": {
                    "value": {
                      "code": "PA003",
                      "message": "Body is invalid JSON string",
                      "statusCode": 400
                    }
                  },
                  "PA004 - Request body missing or empty": {
                    "value": {
                      "code": "PA004",
                      "message": "Request body missing or empty",
                      "statusCode": 400
                    }
                  },
                  "PA005 - Validation failed - see info for more details": {
                    "value": {
                      "code": "PA005",
                      "message": "Validation failed - see info for more details",
                      "statusCode": 400,
                      "info": {
                        "errors": [
                          {
                            "message": "\"Last Onboarded\" must be a boolean",
                            "path": [
                              "lastOnboarded"
                            ],
                            "type": "boolean.base",
                            "context": {
                              "label": "Last Onboarded",
                              "value": 2,
                              "key": "lastOnboarded"
                            },
                            "paramType": "body"
                          }
                        ]
                      }
                    }
                  },
                  "PA007 - Already exists": {
                    "value": {
                      "code": "PA007",
                      "message": "Already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised user when getting hello 1. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                },
                "examples": {
                  "AU002 - Invalid credentials": {
                    "value": {
                      "code": "AU002",
                      "message": "Invalid credentials",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found when getting hello 1. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                },
                "examples": {
                  "AU001 - User not found": {
                    "value": {
                      "code": "AU001",
                      "message": "User not found",
                      "statusCode": 404
                    }
                  },
                  "DE006 - Page not found": {
                    "value": {
                      "code": "DE006",
                      "message": "Page not found",
                      "statusCode": 404
                    }
                  },
                  "DE009 - Item not found": {
                    "value": {
                      "code": "DE009",
                      "message": "Item not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "A server error when getting hello 1. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "DB001 - Error connecting to the database": {
                    "value": {
                      "code": "DB001",
                      "message": "Error connecting to the database",
                      "statusCode": 500
                    }
                  },
                  "DB002 - Error deleting from the database": {
                    "value": {
                      "code": "DB002",
                      "message": "Error deleting from the database",
                      "statusCode": 500
                    }
                  },
                  "DB003 - Error inserting to the database": {
                    "value": {
                      "code": "DB003",
                      "message": "Error inserting to the database",
                      "statusCode": 500
                    }
                  },
                  "DB004 - Error querying the database": {
                    "value": {
                      "code": "DB004",
                      "message": "Error querying the database",
                      "statusCode": 500
                    }
                  },
                  "DB005 - Error updating the database": {
                    "value": {
                      "code": "DB005",
                      "message": "Error updating the database",
                      "statusCode": 500
                    }
                  },
                  "DB006 - Error with the database": {
                    "value": {
                      "code": "DB006",
                      "message": "Error with the database",
                      "statusCode": 500
                    }
                  },
                  "DB007 - Error upserting to the database": {
                    "value": {
                      "code": "DB007",
                      "message": "Error upserting to the database",
                      "statusCode": 500
                    }
                  },
                  "DE000 - Unexpected error": {
                    "value": {
                      "code": "DE000",
                      "message": "Unexpected error",
                      "statusCode": 500
                    }
                  },
                  "DE002 - Unexpected error (5XX)": {
                    "value": {
                      "code": "DE002",
                      "message": "Unexpected error (5XX)",
                      "statusCode": 500
                    }
                  },
                  "DE007 - Operation failed": {
                    "value": {
                      "code": "DE007",
                      "message": "Operation failed",
                      "statusCode": 500
                    }
                  },
                  "DE008 - Connection failed": {
                    "value": {
                      "code": "DE008",
                      "message": "Connection failed",
                      "statusCode": 500
                    }
                  },
                  "TR000 - An error occurred": {
                    "value": {
                      "code": "TR000",
                      "message": "An error occurred",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hello2/{name}": {
      "get": {
        "operationId": "hello2",
        "summary": "Hello 2",
        "description": "Hello 2 template.",
        "tags": [
          "Hello Two Section"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An object returning hello2: true.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelloTwoSchema"
                }
              }
            }
          },
          "400": {
            "description": "An error message when getting getting hello 2. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "DE001 - Unexpected error (4XX)": {
                    "value": {
                      "code": "DE001",
                      "message": "Unexpected error (4XX)",
                      "statusCode": 400
                    }
                  },
                  "PA001 - Parameter error": {
                    "value": {
                      "code": "PA001",
                      "message": "Parameter error",
                      "statusCode": 400
                    }
                  },
                  "PA002 - Parameter missing": {
                    "value": {
                      "code": "PA002",
                      "message": "Parameter missing",
                      "statusCode": 400
                    }
                  },
                  "PA003 - Body is invalid JSON string": {
                    "value": {
                      "code": "PA003",
                      "message": "Body is invalid JSON string",
                      "statusCode": 400
                    }
                  },
                  "PA004 - Request body missing or empty": {
                    "value": {
                      "code": "PA004",
                      "message": "Request body missing or empty",
                      "statusCode": 400
                    }
                  },
                  "PA005 - Validation failed - see info for more details": {
                    "value": {
                      "code": "PA005",
                      "message": "Validation failed - see info for more details",
                      "statusCode": 400,
                      "info": {
                        "errors": [
                          {
                            "message": "\"Last Onboarded\" must be a boolean",
                            "path": [
                              "lastOnboarded"
                            ],
                            "type": "boolean.base",
                            "context": {
                              "label": "Last Onboarded",
                              "value": 2,
                              "key": "lastOnboarded"
                            },
                            "paramType": "body"
                          }
                        ]
                      }
                    }
                  },
                  "PA007 - Already exists": {
                    "value": {
                      "code": "PA007",
                      "message": "Already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised user when getting getting hello 2. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                },
                "examples": {
                  "AU002 - Invalid credentials": {
                    "value": {
                      "code": "AU002",
                      "message": "Invalid credentials",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found when getting getting hello 2. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                },
                "examples": {
                  "AU001 - User not found": {
                    "value": {
                      "code": "AU001",
                      "message": "User not found",
                      "statusCode": 404
                    }
                  },
                  "DE006 - Page not found": {
                    "value": {
                      "code": "DE006",
                      "message": "Page not found",
                      "statusCode": 404
                    }
                  },
                  "DE009 - Item not found": {
                    "value": {
                      "code": "DE009",
                      "message": "Item not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "A server error when getting getting hello 2. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "DB001 - Error connecting to the database": {
                    "value": {
                      "code": "DB001",
                      "message": "Error connecting to the database",
                      "statusCode": 500
                    }
                  },
                  "DB002 - Error deleting from the database": {
                    "value": {
                      "code": "DB002",
                      "message": "Error deleting from the database",
                      "statusCode": 500
                    }
                  },
                  "DB003 - Error inserting to the database": {
                    "value": {
                      "code": "DB003",
                      "message": "Error inserting to the database",
                      "statusCode": 500
                    }
                  },
                  "DB004 - Error querying the database": {
                    "value": {
                      "code": "DB004",
                      "message": "Error querying the database",
                      "statusCode": 500
                    }
                  },
                  "DB005 - Error updating the database": {
                    "value": {
                      "code": "DB005",
                      "message": "Error updating the database",
                      "statusCode": 500
                    }
                  },
                  "DB006 - Error with the database": {
                    "value": {
                      "code": "DB006",
                      "message": "Error with the database",
                      "statusCode": 500
                    }
                  },
                  "DB007 - Error upserting to the database": {
                    "value": {
                      "code": "DB007",
                      "message": "Error upserting to the database",
                      "statusCode": 500
                    }
                  },
                  "DE000 - Unexpected error": {
                    "value": {
                      "code": "DE000",
                      "message": "Unexpected error",
                      "statusCode": 500
                    }
                  },
                  "DE002 - Unexpected error (5XX)": {
                    "value": {
                      "code": "DE002",
                      "message": "Unexpected error (5XX)",
                      "statusCode": 500
                    }
                  },
                  "DE007 - Operation failed": {
                    "value": {
                      "code": "DE007",
                      "message": "Operation failed",
                      "statusCode": 500
                    }
                  },
                  "DE008 - Connection failed": {
                    "value": {
                      "code": "DE008",
                      "message": "Connection failed",
                      "statusCode": 500
                    }
                  },
                  "TR000 - An error occurred": {
                    "value": {
                      "code": "TR000",
                      "message": "An error occurred",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hello3": {
      "post": {
        "operationId": "hello3",
        "summary": "Hello 3",
        "description": "Hello 3 template.",
        "tags": [
          "Hello Two Section"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hello3Request"
              },
              "examples": {
                "RequestExample1": {
                  "value": {
                    "hello3": "request-example-1"
                  },
                  "summary": "RequestExample 1"
                },
                "RequestExample2": {
                  "value": {
                    "hello3": "request-example-2"
                  },
                  "summary": "Request Example 2"
                }
              }
            }
          },
          "description": "Hello 3 request body"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "An object returning hello3 response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelloThreeSchema"
                },
                "examples": {
                  "ResponseExample1": {
                    "value": {
                      "hello3": "response-example-1"
                    },
                    "summary": "Response Example 1"
                  },
                  "ResponseExample2": {
                    "value": {
                      "hello3": "response-example-2"
                    },
                    "summary": "Response Example 2"
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error message when getting getting hello 3. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "DE001 - Unexpected error (4XX)": {
                    "value": {
                      "code": "DE001",
                      "message": "Unexpected error (4XX)",
                      "statusCode": 400
                    }
                  },
                  "PA001 - Parameter error": {
                    "value": {
                      "code": "PA001",
                      "message": "Parameter error",
                      "statusCode": 400
                    }
                  },
                  "PA002 - Parameter missing": {
                    "value": {
                      "code": "PA002",
                      "message": "Parameter missing",
                      "statusCode": 400
                    }
                  },
                  "PA003 - Body is invalid JSON string": {
                    "value": {
                      "code": "PA003",
                      "message": "Body is invalid JSON string",
                      "statusCode": 400
                    }
                  },
                  "PA004 - Request body missing or empty": {
                    "value": {
                      "code": "PA004",
                      "message": "Request body missing or empty",
                      "statusCode": 400
                    }
                  },
                  "PA005 - Validation failed - see info for more details": {
                    "value": {
                      "code": "PA005",
                      "message": "Validation failed - see info for more details",
                      "statusCode": 400,
                      "info": {
                        "errors": [
                          {
                            "message": "\"Last Onboarded\" must be a boolean",
                            "path": [
                              "lastOnboarded"
                            ],
                            "type": "boolean.base",
                            "context": {
                              "label": "Last Onboarded",
                              "value": 2,
                              "key": "lastOnboarded"
                            },
                            "paramType": "body"
                          }
                        ]
                      }
                    }
                  },
                  "PA007 - Already exists": {
                    "value": {
                      "code": "PA007",
                      "message": "Already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised user when getting getting hello 3. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                },
                "examples": {
                  "AU002 - Invalid credentials": {
                    "value": {
                      "code": "AU002",
                      "message": "Invalid credentials",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found when getting getting hello 3. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                },
                "examples": {
                  "AU001 - User not found": {
                    "value": {
                      "code": "AU001",
                      "message": "User not found",
                      "statusCode": 404
                    }
                  },
                  "DE006 - Page not found": {
                    "value": {
                      "code": "DE006",
                      "message": "Page not found",
                      "statusCode": 404
                    }
                  },
                  "DE009 - Item not found": {
                    "value": {
                      "code": "DE009",
                      "message": "Item not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "A server error when getting getting hello 3. The examples show all possible `code` and `message` values, not limited to this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "DB001 - Error connecting to the database": {
                    "value": {
                      "code": "DB001",
                      "message": "Error connecting to the database",
                      "statusCode": 500
                    }
                  },
                  "DB002 - Error deleting from the database": {
                    "value": {
                      "code": "DB002",
                      "message": "Error deleting from the database",
                      "statusCode": 500
                    }
                  },
                  "DB003 - Error inserting to the database": {
                    "value": {
                      "code": "DB003",
                      "message": "Error inserting to the database",
                      "statusCode": 500
                    }
                  },
                  "DB004 - Error querying the database": {
                    "value": {
                      "code": "DB004",
                      "message": "Error querying the database",
                      "statusCode": 500
                    }
                  },
                  "DB005 - Error updating the database": {
                    "value": {
                      "code": "DB005",
                      "message": "Error updating the database",
                      "statusCode": 500
                    }
                  },
                  "DB006 - Error with the database": {
                    "value": {
                      "code": "DB006",
                      "message": "Error with the database",
                      "statusCode": 500
                    }
                  },
                  "DB007 - Error upserting to the database": {
                    "value": {
                      "code": "DB007",
                      "message": "Error upserting to the database",
                      "statusCode": 500
                    }
                  },
                  "DE000 - Unexpected error": {
                    "value": {
                      "code": "DE000",
                      "message": "Unexpected error",
                      "statusCode": 500
                    }
                  },
                  "DE002 - Unexpected error (5XX)": {
                    "value": {
                      "code": "DE002",
                      "message": "Unexpected error (5XX)",
                      "statusCode": 500
                    }
                  },
                  "DE007 - Operation failed": {
                    "value": {
                      "code": "DE007",
                      "message": "Operation failed",
                      "statusCode": 500
                    }
                  },
                  "DE008 - Connection failed": {
                    "value": {
                      "code": "DE008",
                      "message": "Connection failed",
                      "statusCode": 500
                    }
                  },
                  "TR000 - An error occurred": {
                    "value": {
                      "code": "TR000",
                      "message": "An error occurred",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}